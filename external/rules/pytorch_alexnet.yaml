# Rules to import pytorch alexnet pretrained model into checkpoints.
#
# Model:
#     https://github.com/pytorch/vision/blob/master/torchvision/models/alexnet.py
# Weights:
#     https://download.pytorch.org/models/alexnet-owt-4df8aa71.pth
#
# Tensors require us to permute them, as their spatial ordering is different
# from tensorflow.
#
# Convolution:
#     torch:      [out_maps, in_maps, kernel_h, kernel_w]
#     tensorflow: [kernel_h, kernel_w, in_maps, out_maps]
# FC:
#     torch:      [out, in]
#     tensorflow: [in, out]
#
# Additionally, because the ordering of inputs are different between TensorFlow
# [height, width, channels] and PyTorch [channels, height, width], flatten + FC
# requires additional processing.  For instance, AlexNet fc6 in PyTorch uses
# 4096x9216, where 9216 is flattened from 256x6x6.  In order to produce the
# correct spatial ordering in TensorFlow, we need to first unflatten 4096x9216
# into 4096x256x6x6, permute into 4096x6x6x256 and reflatten it to 4096x9216
# and finally permute into 9216x4096.
---
permute:
    2: [{type: transpose, axes: [1, 0]}]
    4: [{type: transpose, axes: [2, 3, 1, 0]}]
    classifier.1.weight:
        - {type: reshape, newshape: [4096, 256, 6, 6]}
        - {type: transpose, axes: [0, 2, 3, 1]}
        - {type: reshape, newshape: [4096, 9216]}
        - {type: transpose, axes: [1, 0]}
rename:
    \.: /
    bias: biases
    weight: weights
    features/0: alexnet/conv1
    features/3: alexnet/conv2
    features/6: alexnet/conv3
    features/8: alexnet/conv4
    features/10: alexnet/conv5
    classifier/1: alexnet/fc6
    classifier/4: alexnet/fc7
    classifier/6: alexnet/logits
